{"/home/travis/build/npmtest/node-npmtest-socializr/test.js":"/* istanbul instrument in package npmtest_socializr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socializr/lib.npmtest_socializr.js":"/* istanbul instrument in package npmtest_socializr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_socializr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_socializr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-socializr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-socializr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_socializr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_socializr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_socializr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_socializr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_socializr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_socializr.__dirname + '/lib.npmtest_socializr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socializr/node_modules/socializr/index.js":"module.exports = require('./lib/socializr');\n","/home/travis/build/npmtest/node-npmtest-socializr/node_modules/socializr/lib/socializr.js":"var debug = require('debug')('socializr:core')\n  , https = require('https')\n  , http = require('http')\n  , stream = require('stream')\n  , util     = require('util')\n  , PubSub = require('./auth/pubsub')\n  , Transform = stream.Transform\n  , Twitter = require('./providers/twitter')\n  , Facebook = require('./providers/facebook')\n  , Instagram = require('./providers/instagram')\n  , GooglePlus = require('./providers/gplus')\n;\n\n/**\n * Set maximum number of socket connections allowed\n */\nhttps.globalAgent.maxSockets = Number.MAX_VALUE;\nhttp.globalAgent.maxSockets = Number.MAX_VALUE;\n\n\n\n/**\n *\n */\nvar Socializr  = function(providers){\n\n  debug('Initializing socializr with %s providers',providers?providers.length:0);\n\n  Transform.call(this, {\n    objectMode: true\n  });\n  this.providers = providers;\n};\nutil.inherits(Socializr, Transform);\n\n\n\nSocializr.prototype.stream = function(request, auths){\n  auths = auths instanceof Array ? auths : [auths];\n  var self = this;\n  for (var i = auths.length - 1; i >= 0; i--) {\n    debug('Streaming data %j from %j with uuid %s',request,auths[i]._provider.__proto__,auths[i]._provider.uuid);\n    auths[i]._provider.stream( request, auths[i], this);\n  };\n};\n\nSocializr.prototype.unstream = function(request, auths){\n  auths = auths instanceof Array ? auths : [auths];\n  var self = this;\n  for (var i = auths.length - 1; i >= 0; i--) {\n    debug('Unstreaming data %j from provider with uuid %s',request,auths[i]._provider.uuid);\n    auths[i]._provider.unstream( request, auths[i], this);\n  };\n};\n\nSocializr.prototype._onError = function(err, conn){\n  debug('Socializr captured an error %j with connection %s',err,conn);\n  this.emit('warning', err, conn);\n};\n\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method _transform\n  * @memberOf Socializr\n  */\nSocializr.prototype._transform = function(chunk, encoding, done){\n  this.push( chunk);\n  done();\n};\n\n\n/**\n *\n */\nmodule.exports = function(providers){\n  return new Socializr(providers);\n};\n\n\n/**\n *\n */\nmodule.exports.rawBody = function(){\n  return function(req, res, next){\n    var data = '';\n    req.on('data', function(chunk){\n      data += chunk;\n    });\n    req.on('end', function(){\n      req.text = data;\n    });\n    next();\n  };\n};\n\n\n\n/**\n *\n */\nmodule.exports.Socializr   = Socializr;\n\n\n/**\n *\n */\nmodule.exports.Twitter   = Twitter;\n\n/**\n *\n */\nmodule.exports.Facebook  = Facebook;\n\n\n/**\n *\n */\nmodule.exports.Instagram  = Instagram;\n\n/**\n *\n */\nmodule.exports.GooglePlus  = GooglePlus;\n","/home/travis/build/npmtest/node-npmtest-socializr/node_modules/socializr/lib/auth/pubsub.js":"var util     = require('util')\n  , crypto   = require('crypto')\n  , stream   = require('stream')\n  , Transform= stream.Transform\n  , oauth1a  = require('../auth/oauth1a')\n;\n\n\n\nfunction PubSubConnection(secret, stream){\n  if( !secret){\n    throw new Error('Invalid client secret.')\n  }\n  this.appSecret = secret;\n  this.stream = stream;\n  this._verifyTokens = {};\n  Transform.call(this, {\n    objectMode: false\n  });\n};\nutil.inherits(PubSubConnection, Transform);\n\nPubSubConnection.prototype.isVerifyToken = function(token){\n  token = token.toString();\n  if(this._verifyTokens[ token]==token){\n    delete this._verifyTokens[ token]==token\n    return true;\n  }\n  return false;\n};\n\n\nPubSubConnection.prototype.verifyToken = function(){\n  this._verifyToken = oauth1a.makeNonce();\n  this._verifyTokens[ this._verifyToken] = this._verifyToken;\n  return this._verifyToken;\n};\n\nPubSubConnection.prototype.isSignatureValid = function(data, signature){\n  var hmac = crypto.createHmac('sha1', this.appSecret);\n  hmac.update(\n    typeof data == 'string' ? data : JSON.stringify(data),\n    'utf8'\n  );\n  return signature.replace(/^sha1=/i,'') == hmac.digest('hex');\n};\n\nPubSubConnection.prototype.verify = function(){\n var _this = this;\n return function(req, res){\n   if( _this.isVerifyToken( req.query['hub.verify_token'])){\n     res.send( req.query['hub.challenge']);\n   }else {\n     res.send(401);\n   }\n };\n};\n\nPubSubConnection.prototype.subscription = function(){\n  var _this = this;\n  return function(req, res, next){\n    if( _this.isSignatureValid(\n        req.text, req.get('x-hub-signature'))\n      ){\n      _this.stream.write(req.body);\n      res.send(200);\n    }else{\n      res.send(401);\n    }\n  };\n};\n\n\nmodule.exports = PubSubConnection;\n","/home/travis/build/npmtest/node-npmtest-socializr/node_modules/socializr/lib/auth/oauth1a.js":"/*!\n * Module dependencies.\n */\nvar _ = require('underscore')\n  , crypto = require('crypto')\n  , nonceChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n;\n\n\n/**\n *\n * Export lib\n */\nmodule.exports = {\n\n/**\n * OAuth Spec version conformance\n *\n */\n  OAUTH_VERSION: '1.0a',\n\n/**\n * Generate OAuth header string.\n *\n * @params {Object} params\n * @params {String} signature\n * @return {String}\n */\nauthHeader: function( params, signature){\n  params['oauth_signature'] = signature;\n  var auth = [];\n  for( var k in params){\n    auth.push(\n      encodeURIComponent(k)+'=\"'+encodeURIComponent( params[k])+'\"'\n    );\n  }\n  auth.sort();\n  return 'OAuth ' + auth.join(', ');\n},\n\n\n/**\n * Generate OAuth compatible representation\n * of data and header values for signing.\n *\n * @params {Object} data\n * @params {Object} params\n * @return {String}\n */\nparamsString: function( data, params){\n  params = _.extend(data, params);\n  var paramsString = [];\n  for( var k in params){\n    paramsString.push(\n      encodeURIComponent(k)+'='+encodeURIComponent(params[ k])\n    );\n  }\n  paramsString.sort();\n  return paramsString.join('&');\n},\n\n/**\n  * Generate base string for creating OAuth signature\n  *\n  * @params {String} method\n  * @params {String} url\n  * @params {String} paramsString\n  * @return {String}\n  */\nsignatureBaseString: function( method, url, paramsString){\n  return [\n      method.toUpperCase(),\n      encodeURIComponent(url),\n      encodeURIComponent(paramsString)\n    ].join('&');\n},\n\n\n/**\n  * Generate OAuth 1.0a signing key\n  *\n  * @params {String} appSecret Application/ Client secret\n  * @params {String} tokenSecret User access token secret\n  * @return {String}\n  */\nsigningKey: function( appSecret, tokenSecret){\n  return [\n    encodeURIComponent(appSecret),\n    tokenSecret ? encodeURIComponent(tokenSecret) : ''\n  ].join('&');\n},\n\n/**\n * Generate OAuth 1.0a signature\n *\n * @params {String} signatureBase\n * @params {String} key\n * @return {String} Base64 encoded string encrypted with SHA1\n */\nsignature: function( signatureBase, key){\n  return crypto.createHmac(\"sha1\", key)\n          .update(signatureBase)\n          .digest(\"base64\");\n},\n\n/**\n * Random 32 bit string\n *\n * @return {String}\n */\nmakeNonce: function(){\n  var nonce = [], nonceRange = nonceChars.length-1;\n  while( nonce.length<32){\n    nonce.push(\n      nonceChars[ Math.round(Math.random()*nonceRange)]\n    );\n  }\n  return nonce.join('');\n},\n\n/**\n * Generate OAuth 1.0a Authorization header string\n * from parameters\n *\n * @params {Object} opts\n * @return {String} Authorization string\n */\ncreateAuthHeaders: function(opts){\n  var params = {\n        oauth_nonce:            this.makeNonce(),\n        oauth_timestamp:        Date.now()/1000,\n        oauth_consumer_key:     opts.appKey,\n        oauth_signature_method: 'HMAC-SHA1',\n        oauth_version:          '1.0'\n      }\n  ;\n  if( opts.token){\n    params.oauth_token = opts.token;\n  }\n  var paramsString  = this.paramsString(opts.data, params)\n    , sigBaseString = this.signatureBaseString( opts.method, opts.url, paramsString)\n\n    , signingKey    = this.signingKey( opts.appSecret, opts.tokenSecret)\n    , signature     = this.signature( sigBaseString, signingKey)\n  ;\n  return this.authHeader( params, signature);\n}\n\n};\n","/home/travis/build/npmtest/node-npmtest-socializr/node_modules/socializr/lib/providers/twitter.js":"/*!\n * Module dependencies.\n */\nvar debug = require('debug')('socializr:provider:twitter')\n  , https    = require('https')\n  , stream   = require('stream')\n  , util     = require('util')\n  , zlib     = require('zlib')\n  , crypto   = require('crypto')\n  , url      = require('url')\n  , qs       = require('querystring')\n  , events   = require('events')\n  , uuid     = require('node-uuid')\n  , _        = require('underscore')\n\n  , Transform = stream.Transform\n\n/**\n * Internal OAuth helper lib\n */\n  , oauth    = require('../auth/oauth1a')\n\n  , Message = require('../message')\n\n/**\n * Package info\n */\n  , pkg = require('../../package')\n\n\n/**\n * Maximum number of terms each connection can handle\n */\n  , T_MAX_tags_PER_CONN   = 400\n\n\n/**\n * Maximum number of users each connection can handle\n */\n  , T_MAX_FOLLOWS_PER_CONN = 5000\n\n\n\n/**\n * URL for handling Twitter streams. This is the primary\n * source of data. All connections start by requesting\n * this endpoint then fallback to others based on different\n * application or response criteria.\n *\n */\n  , T_FILTER_URL       = 'https://userstream.twitter.com/1.1/statuses/filter.json'\n\n/**\n * URL for handling Twitter search requests\n */\n  , T_SEARCH_URL       = 'https://api.twitter.com/1.1/search/tweets.json'\n\n/**\n * URL for handling Twitter User streams\n */\n  , T_USER_STREAM_URL  = 'https://userstream.twitter.com/1.1/user.json'\n\n  , T_STALL_TIMEOUT = 90000\n\n  , T_STREAM_CHUNK_DELIMITER = '\\r\\n'\n\n  , T_MIN_RECONNECT_CYCLE_COUNT = 3\n\n  , T_CONNERR_TCP = 1\n\n  , T_CONNERR_RATELIMIT = 2\n\n  , T_CONNERR_UNAVAIL = 3\n\n  , T_DATA_REFRESHED = 4\n\n  , T_ERRTCP_RECONNECT_INCEREMENT = 250\n\n  , T_ERRTCP_RECONNECT_MAX_TIME = 16000\n\n  , T_RECONNECT_MIN_TIME = 20000\n\n  , T_CONNERR_UNAVAIL = new Error('Twitter server seems to be unavailable. ')\n;\n\n/**\n * Create md5 hashes of the provided string.\n *\n * @param {String} str\n * @return {String} MD5 hash of input value\n */\nfunction md5(str){\n  var md5 = crypto.createHash('md5');\n  md5.update(str);\n  return md5.digest('hex');\n}\n\n/**\n * Parse Host name portion of URI\n *\n * @param {String} uri\n * @return {String} Hostname of URI\n */\nfunction hostname(uri){\n  return url.parse(uri).hostname;\n}\n\n/**\n * Parse Path only portion of URI\n *\n * @param {String} uri\n * @return {String} Pathname of URI\n */\nfunction path(uri){\n  return url.parse(uri).pathname;\n}\n\n\n\n/**\n * TwitterStream constructor\n *\n * @param {Object} appAuth Application credentials from Twitter\n * @param {Object} userAuth User credentials from Twitter\n * @api public\n */\nfunction TwitterStream(appAuth, userAuth){\n\n  if( !appAuth ||\n      !appAuth.hasOwnProperty('key') ||\n      !appAuth.hasOwnProperty('secret')\n  ){\n    throw new Error('Invalid App/Client Authentication info. `key` and `secret` properties are required.');\n  }\n\n  if( !userAuth ||\n      !userAuth.hasOwnProperty('user') ||\n      !userAuth.hasOwnProperty('token') ||\n      !userAuth.hasOwnProperty('secret')\n  ){\n    throw new Error('Invalid User Authentication info. `user`, `token` and `secret` properties are required.');\n  }\n\n  Transform.call(this, {\n  });\n\n  this._writableState.objectMode = false;\n  this._readableState.objectMode = true;\n\n  this._appAuth   = appAuth;\n  this._userAuth  = userAuth;\n\n  this._pressure       = 0;\n\n  this._body               = '';\n  this._stid               = -1;\n  this._fails              = 0;\n  this._lastConnected      = 0;\n  this._lastConnAttempted  = 0;\n  this._dataReceived       = 0;\n\n  this._tags      = [];\n  this._users      = [];\n  this._locations  = [];\n};\nutil.inherits(TwitterStream, Transform);\n\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method open\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype.open = function(){\n\n  var method = 'GET'\n    , currentDataSignature = this._dataSignature\n  ;\n\n\n\n  if( (this._connecting&&!this._reconnectDelay) || (this._lastConnected && (Date.now()-this._lastConnected) < T_RECONNECT_MIN_TIME)){\n    debug('Attempting to reconnect');\n\n    if( this._connecting && currentDataSignature !== this._calculateDataSignature()){\n      this._reconnect(T_DATA_REFRESHED);\n    }else{\n      this._reconnect();\n    }\n\n    return true;\n  }else if( !this._connecting && !this._reconnectDelay && (this._tags.length || this._users.length || this._locations.length)){\n\n    debug('Opening a new request');\n\n    this._dataSignature = this._calculateDataSignature();\n\n    debug('Request data signature %s',this._dataSignature);\n    debug('Request data \\n\\t tags: %j \\n\\t users: %j \\n\\t locations: %j \\n\\t language: %s',\n    this._tags.sort(),\n    this._users.sort(),\n    this._locations.sort(),\n    this.language);\n\n    if( this._dataSignature !== currentDataSignature || !this._req){\n      this.close();\n      this._connecting = true;\n      this._cancelDelayedReconnection();\n      this._createClientRequest(method);\n\n      if( method=='POST'){\n        this._req.end(\n          this._createRequestData(true),\n          'utf8'\n        );\n      }else {\n        this._req.end();\n      }\n      return true;\n    }else {\n      debug('Duplicate request from stream. Will not open to avoid rate limiting.');\n    }\n  }\n  return false;\n};\n\n\nTwitterStream.prototype._resetFails = function(){\n  this._fails = 0;\n};\n\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method close\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype._reconnect = function(reason){\n  debug('Attempting to reconnect to server for reason %s', reason);\n  if( (!arguments.length && this._reconnectDelay) || (reason!=T_CONNERR_RATELIMIT && this._isRateLimited) || (this._connecting&&reason!==T_DATA_REFRESHED)){\n    debug('Reconnect attempt denied. Either because of an existing delay or an attempt is already in progress.');\n    return;\n  }\n  //\n\n  var delay;\n  switch(reason){\n    case T_CONNERR_UNAVAIL:\n      delay = (Math.pow(this._fails,2))*5000;\n      debug('Delaying reconnect by %s seconds due to unavailable connection', delay/1000);\n      if( delay>320000){\n        throw T_ERR_CONN_UNAVAIL;\n      }\n      break;\n\n    case T_CONNERR_RATELIMIT:\n      delay = (Math.pow(this._fails,2))*60000;\n      debug('Delaying reconnect by %s seconds due to rate limiting', delay/1000);\n      break;\n\n    case T_DATA_REFRESHED:\n    default:\n      delay = T_RECONNECT_MIN_TIME;\n      debug('Delaying reconnect by %s seconds', delay/1000);\n      break;\n  }\n\n  this._cancelDelayedReconnection();\n  this._reconnectDelay = setTimeout(function(){\n    this._reconnectDelay = null;\n    this.close();\n    process.nextTick(function(){\n      debug('Executing reconnect after %s seconds with reason %s', delay/1000, reason);\n      this.open();\n    }.bind(this));\n  }.bind(this), delay);\n};\n\nTwitterStream.prototype._cancelDelayedReconnection = function(){\n  clearTimeout( this._reconnectDelay);\n};\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method _createClientRequest\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype._createClientRequest = function(method){\n  this._body = '';\n  this._req = https.request(\n                this._createRequestOptions( T_FILTER_URL, method),\n                function(res){\n                  this._connectionResponse(res);\n                }.bind(this)\n              );\n\n  this._req.on('error', function(e){\n    debug('Connection error: %j', e);\n    this._lastConnected = Date.now();\n    this._connecting = false;\n    this._fails++;\n    this._tcpError(e);\n  }.bind(this));\n\n  return this._req;\n};\n\n\n\nTwitterStream.prototype._tcpError = function(e){\n\n  debug('TCP error connecting %s', e);\n\n  var wait = this._fails*T_ERRTCP_RECONNECT_INCEREMENT;\n  if( wait<T_ERRTCP_RECONNECT_MAX_TIME){\n    setTimeout(function(){\n      this._reconnect(T_CONNERR_TCP);\n    }.bind(this), wait);\n  }else {\n    // fallback to manual requests\n  }\n};\n\n\n\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method _createRequestOptions\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype._createRequestOptions = function(endpointUrl, endpointMethod){\n  var method = endpointMethod || 'GET'\n    , auth = oauth.createAuthHeaders({\n        method:  method,\n        url:     endpointUrl,\n        data:    this._createRequestData(),\n\n        appKey:     this._appAuth.key,\n        appSecret:  this._appAuth.secret,\n\n        token:       this._userAuth.token,\n        tokenSecret: this._userAuth.secret\n      })\n  ;\n\n\n  var qs = '';\n  if( method == 'GET'){\n    qs = '?' + this._createRequestData(true);\n  }\n\n  return {\n    hostname: hostname( T_FILTER_URL),\n    path:     path( T_FILTER_URL) + qs,\n    method:   method,\n    headers: {\n      'Authorization':    auth,\n      'User-Agent':       pkg.name + ' v' + pkg.version,\n      'Content-Type':     'application/x-www-form-urlencoded;charset=UTF-8',\n      'Accept-Encoding':  'gzip',\n      'Connection':       'keep-alive'\n    },\n\n    /* Disable agent pooling */\n    agent: false\n  };\n};\n\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method _createRequestData\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype._createRequestData = function(encode){\n  var data = {\n    stall_warnings: true\n  };\n\n  if( this._tags.length){\n    data.track = this._tags.join(',');\n  }\n\n  if( this._users.length){\n    data.follow = this._users.join(',');\n  }\n\n  if( this._locations.length){\n    var loc = this._locations, locs = [];\n    for( var i in loc){\n      locs.push( this._transformLocation( loc[ i]));\n    }\n    data.locations = locs.join(',');\n  }\n\n  if(this.language){\n    data.language = this.language;\n  }\n\n  debug('Request data created as %j',data);\n  return encode ? qs.stringify(data) : data;\n};\n\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method _transformLocation\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype._transformLocation = function(loc){\n  return [\n    loc.sw.lng,\n    loc.sw.lat,\n    loc.ne.lng,\n    loc.ne.lat\n  ].join(',');\n};\n\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method _connectionResponse\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype._connectionResponse = function(res){\n\n  debug('Request responded with status code %s',res.statusCode);\n\n  this._lastConnected = Date.now();\n  this._connecting = false;\n\n\n  switch( res.statusCode){\n\n    case 200:\n      this._isRateLimited = false;\n      this._resetFails();\n      this._connected( res);\n      break;\n\n    default:\n      this._connectionError( res);\n      break;\n  }\n\n};\n\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method _connectionError\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype._connectionError = function(res){\n\n  var err;\n  switch( res.statusCode){\n\n    case 401:\n      err = {\n        code: 401,\n        message: 'Unauthorized'\n      };\n      break;\n\n    case 420:\n      err = {\n        code: 420,\n        message: 'Rate limited'\n      };\n      this._isRateLimited = true;\n      this._reconnect( T_CONNERR_RATELIMIT);\n      break;\n\n    case 503:\n      err = {\n        code: 503,\n        message: 'Service Unavailable'\n      };\n      this._reconnect( T_CONNERR_UNAVAIL);\n      break;\n\n    default:\n      err = {\n        code: res.statusCode,\n        message: 'Error connecting.'\n      };\n      break;\n  }\n\n  debug('Error making request. Server responded with status code %s and message \"%s\"', err.code, err.message);\n\n  this._fails++;\n  this.close();\n  this.emit('warning', err);\n};\n\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method _connected\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype._connected = function(res){\n  debug('Succesfull connection');\n  this._res = res;\n\n  switch( res.headers['content-encoding']){\n    case 'gzip':\n      this._gunzip = zlib.createGunzip();\n      this._res\n        .pipe(this._gunzip)\n        .pipe(this);\n      break;\n\n    default:\n      this._res.pipe(this);\n      break;\n  }\n};\n\n\nTwitterStream.prototype._resetStallTimer = function(){\n  var strm = this;\n  clearTimeout(this._stid);\n  this._stid = setTimeout(function(){\n    strm._handleStall();\n  }, T_STALL_TIMEOUT);\n};\n\n\nTwitterStream.prototype._unpipeResponseStreams = function(){\n  if( this._res&&this._gunzip){\n    this._res.unpipe( this._gunzip);\n    this._gunzip.unpipe(this);\n    this._res = this._gunzip = null;\n  }\n};\n\n\nTwitterStream.prototype._handleStall = function(){\n  debug('Stall warning from server.');\n  this.emit('stall', this);\n  var cc = 0, self = this;\n  (function tick(){\n    if(++cc>T_MIN_RECONNECT_CYCLE_COUNT){\n      self._reconnect();\n    }else{\n      process.nextTick(tick.bind(self));\n    }\n  })();\n};\n\n\n\n/**\n  *\n  *\n  * @param\n  * @api private\n  * @method _transform\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype._transform = function(chunk, encoding, done){\n  this._resetStallTimer();\n  this._dataReceived = Date.now();\n  chunk = chunk.toString();\n\n  if( chunk.trim().length){\n    this._body += chunk;\n    var nextPart, tweet;\n    while( true){\n      nextPart = this._body.indexOf(T_STREAM_CHUNK_DELIMITER,0);\n      if (nextPart !== -1){\n        tweet = this._body.substring(0,nextPart+2);\n        this._body = this._body.substring(nextPart+2);\n        try{\n          this.push(\n            new Message( this, JSON.parse(tweet.trim()) )\n          );\n        }catch(err){\n          this._body = '';\n          debug('Data parse error. Error parsing chunk. Parser trew %j',err);\n          this.emit('warning', err, this);\n          done();\n          return;\n        }\n      }\n      else {\n        break;\n      }\n    };\n  }\n  done();\n};\n\n/**\n  *\n  *\n  */\nTwitterStream.prototype.addData = function(data){\n  if( data.hasOwnProperty('tags')){\n    if( data.tags instanceof Array ){\n      for( var tag in data.tags){\n        this.addTag( data.tags[tag]);\n      }\n    }else {\n      this.addTag( data.tags);\n    }\n  }\n\n  if( data.hasOwnProperty('users')){\n    if( data.users instanceof Array ){\n      for( var user in data.users){\n        this.addUser( data.users[user]);\n      }\n    }else {\n      this.addUser( data.users);\n    }\n  }\n  if( data.hasOwnProperty('locations')){\n    if( data.locations instanceof Array ){\n      for( var locations in data.locations){\n        this.addLocation( data.locations[location]);\n      }\n    }else {\n      this.addLocation( data.locations);\n    }\n  }\n  if( data.hasOwnProperty('language')){\n    this.language = data.language;\n  }\n  debug('Adding data to stream. %j',data);\n};\n\nTwitterStream.prototype.removeData = function(data){\n  if( data.hasOwnProperty('tags')){\n    if( data.tags instanceof Array ){\n      for( var tag in data.tags){\n        this.removeTag( data.tags[tag]);\n      }\n    }else {\n      this.removeTag( data.tags);\n    }\n  }\n  if( data.hasOwnProperty('users')){\n    if( data.users instanceof Array ){\n      for( var user in data.users){\n        this.removeUser( data.users[user]);\n      }\n    }else {\n      this.removeUser( data.users);\n    }\n  }\n  if( data.hasOwnProperty('locations')){\n    if( data.locations instanceof Array ){\n      for( var locations in data.locations){\n        this.removeLocation( data.locations[location]);\n      }\n    }else {\n      this.removeLocation( data.locations);\n    }\n  }\n  if( data.hasOwnProperty('language')){\n    this.language = data.language;\n  }\n  debug('Removing data from stream. %j',data);\n};\n\n\nTwitterStream.prototype._calculateDataSignature = function(){\n  return new Buffer([\n    this._tags.sort().join(),\n    this._users.sort().join(),\n    this._locations.sort().join(),\n    this.language||''\n  ].join('.'))\n  .toString('base64');\n};\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method addTerm\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype.addTag = function(val){\n  if( this._tags.indexOf(val)==-1){\n    if( val&&val.length){\n      this._tags.push( val);\n      this._pressure++;\n    }\n  }\n\n  debug('Added tags: [%j]', this._tags);\n};\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method removeTerm\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype.removeTag = function(val){\n  var i = this._tags.indexOf(val);\n  if( i!=-1){\n    delete this._tags[ i];\n    this._pressure--;\n  }\n  debug('Removed tags: [%j]', this._tags);\n};\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method addUser\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype.addUser = function(val){\n  if( this._users.indexOf(val)==-1){\n    if(val&&val.toString().length){\n      this._users.push( val);\n      this._pressure++;\n    }\n  }\n  debug('Added users: [%j]', this._users);\n};\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method removeUser\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype.removeUser = function(val){\n  var i = this._users.indexOf(val);\n  if( i!=-1){\n    delete this._users[ i];\n    this._pressure--;\n  }\n  debug('Removed users: [%j]', this._users);\n};\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method addLocation\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype.addLocation = function(val){\n  if( this._locations.indexOf(val)==-1){\n    this._locations.push( val);\n    this._pressure++;\n  }\n};\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method removeLocation\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype.removeLocation = function(val){\n  var i = this._locations.indexOf(val);\n  if( i!=-1){\n    delete this._locations[ i];\n    this._pressure--;\n  }\n};\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method close\n  * @memberOf TwitterStream\n  */\nTwitterStream.prototype.close = function(){\n  this._body = '';\n  if( this._req){\n    try{\n      this._req.abort();\n      debug('Request closed');\n    }catch(err){\n      debug('Error closing request. Error thrown %j',err);\n    }\n    this._req = null;\n  }\n  this._unpipeResponseStreams();\n};\n\n\n\nfunction TwitterClient(appAuth, userAuth){\n  if( !appAuth ||\n      !appAuth.hasOwnProperty('key') ||\n      !appAuth.hasOwnProperty('secret')\n  ){\n    throw new Error('Invalid App/Client Authentication info. `key` and `secret` properties are required.');\n  }\n\n  if( !userAuth ||\n      !userAuth.hasOwnProperty('user') ||\n      !userAuth.hasOwnProperty('token') ||\n      !userAuth.hasOwnProperty('secret')\n  ){\n    throw new Error('Invalid User Authentication info. `user`, `token` and `secret` properties are required.');\n  }\n\n  this._appAuth   = appAuth;\n  this._userAuth  = userAuth;\n\n};\nutil.inherits(TwitterClient, events.EventEmitter);\n\nTwitterClient.prototype.request = function(endpointUrl, method, data, cb){\n\n  debug('Building %s request to [%s] with data %j',method, endpointUrl, data);\n\n  this._req = https.request(\n    this._createRequestOptions( endpointUrl, method, data),\n    this._connectionResponse.bind(this)\n  );\n\n  this._req.on('error', function(e){\n    debug('Request error %j', e);\n    cb&&cb(e);\n  }.bind(this));\n\n  if( method=='POST'){\n    this._req.end(\n      qs.stringify(data), 'utf8'\n    );\n  }else {\n    this._req.end();\n  }\n  return this;\n};\n\n\nTwitterClient.prototype._createRequestOptions = function(endpointUrl, endpointMethod, data){\n\n  var method = endpointMethod || 'GET'\n    , auth = oauth.createAuthHeaders({\n        method:  method,\n        url:     endpointUrl,\n        data:    data,\n\n        appKey:     this._appAuth.key,\n        appSecret:  this._appAuth.secret,\n\n        token:       this._userAuth.token,\n        tokenSecret: this._userAuth.secret\n      })\n  ;\n\n\n  var _qs = '';\n  if( method == 'GET'){\n    _qs = '?' + qs.stringify(data);\n  }\n\n  return {\n    hostname: hostname( endpointUrl),\n    path:     path( endpointUrl) + _qs,\n    method:   method,\n    headers: {\n      'Authorization':    auth,\n      'User-Agent':       pkg.name + ' v' + pkg.version,\n      'Content-Type':     'application/x-www-form-urlencoded;charset=UTF-8',\n      'Accept-Encoding':  'gzip',\n      'Connection':       'keep-alive'\n    },\n\n    /* Disable agent pooling */\n    agent: false\n  };\n};\n\n\nTwitterClient.prototype._connectionResponse = function(res){\n\n  switch( res.statusCode){\n\n    case 200:\n      this._connected( res);\n      break;\n\n    default:\n      this._connectionError( res);\n      break;\n  }\n\n};\n\nTwitterClient.prototype._connected = function(res){\n  this._res = res;\n  switch( res.headers['content-encoding']){\n    case 'gzip':\n      this._gunzip = zlib.createGunzip();\n      var body = '';\n      this._gunzip.on('data', function(data){\n        body += data.toString();\n      });\n\n      this._gunzip.on('end', function(){\n        this.emit('data',JSON.parse(body));\n      }.bind(this));\n\n      this._res.pipe(this._gunzip);\n      break;\n\n    default:\n      this.emit('data',data);\n      break;\n  }\n};\n\n\n\nTwitterClient.prototype._connectionError = function(res){\n\n  var err;\n  switch( res.statusCode){\n\n    case 401:\n      err = {\n        code: 401,\n        message: 'Unauthorized'\n      };\n      break;\n\n    case 420:\n      err = {\n        code: 420,\n        message: 'Rate limited'\n      };\n      break;\n\n    case 503:\n      err = {\n        code: 503,\n        message: 'Service Unavailable'\n      };\n      break;\n\n    default:\n      err = {\n        code: res.statusCode,\n        message: 'Error connecting.'\n      };\n      break;\n  }\n\n  debug('Error making request. Server responded with status code %s and message \"%s\"', err.code, err.message);\n\n  this.emit('error', new Error(err.message));\n};\n\n\n\n\n\n/**\n * Twitter constructor\n *\n * @param {Object} appAuth Application credentials from Twitter\n * @api public\n */\nfunction Twitter(options){\n\n  options = _.extend({\n    filters: []\n  },options);\n\n  Transform.call(this, {\n    objectMode: true\n  });\n\n  this._auth = {\n    key: options.key,\n    secret: options.secret\n  };\n\n  this._streamByAuth = {};\n  this._filters = options.filters;\n\n  this.uuid = uuid.v1();\n};\nutil.inherits(Twitter, Transform);\n\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method getStreamForAuth\n  * @memberOf Twitter\n  */\nTwitter.prototype.getStreamForAuth = function(auth){\n  return this._streamByAuth[ this._serializeAuth(auth)];\n};\n\n\nTwitter.prototype._saveStreamForAuth = function(auth,strm){\n  this._streamByAuth[ this._serializeAuth(auth)] = strm;\n};\n\nTwitter.prototype._serializeAuth = function(auth){\n  return [auth.user,auth.token,auth.secret].join(':');\n};\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method connection\n  * @memberOf Twitter\n  */\nTwitter.prototype.auth = function(auth){\n  auth._provider = this;\n  return auth;\n};\n\n\n/**\n  *\n  *\n  * @param\n  * @api public\n  * @method connect\n  * @memberOf Twitter\n  */\nTwitter.prototype.stream = function(request, auth, socializr){\n  auth = auth instanceof Array ? auth : [auth];\n  var i, strm, self = this;\n  for( i in auth){\n    strm = this.getStreamForAuth(auth[ i]);\n    if( !strm){\n      strm = new TwitterStream(this._auth, auth[ i]);\n      strm.uuid = this.uuid;\n      this._saveStreamForAuth( auth[ i], strm);\n      strm.on('warning', this._onError.bind(this));\n      strm.pipe( this);\n\n      if( socializr){\n        this.pipe( socializr);\n        this.on('warning', socializr._onError.bind(socializr));\n      }\n    }\n    strm.addData( request);\n    strm.open();\n  }\n  return this;\n};\n\nTwitter.prototype.unstream = function(request, auth, socializr){\n  auth = auth instanceof Array ? auth : [auth];\n  var i, strm, self = this;\n  for( i in auth){\n    strm = this.getStreamForAuth(auth[ i]);\n    if( strm){\n      strm.removeData( request);\n      strm.open();\n    }\n  }\n  return this;\n};\n\n/**\n  *\n  *\n  * @param\n  * @api privagte\n  * @method _onError\n  * @memberOf Twitter\n  */\nTwitter.prototype._onError = function(err, conn){\n  this.emit('warning', err, conn);\n};\n\n/**\n  *\n  *\n  * @param\n  * @api privagte\n  * @method _transform\n  * @memberOf Twitter\n  */\nTwitter.prototype._transform = function(data, encoding, done){\n  var pass = true;\n  this._filters.forEach( function(cb){\n    if( !cb(data)){\n      pass = false;\n      return false;\n    }\n  });\n  pass&&this.push(data);\n\n  done();\n};\n\n\n/**\n  *\n  * Export lib\n  */\nTwitter.TwitterClient = TwitterClient;\nmodule.exports = Twitter;\n","/home/travis/build/npmtest/node-npmtest-socializr/node_modules/socializr/lib/message.js":"\nvar Message = function(provider, data){\n  this.provider = provider;\n  this.data = data;\n};\n \nmodule.exports   = Message;\n","/home/travis/build/npmtest/node-npmtest-socializr/node_modules/socializr/lib/providers/facebook.js":"var debug    = require('debug')('socializr:provider:facebook')\n  , stream   = require('stream')\n  , util     = require('util')\n  , request  = require('superagent')\n  , uuid     = require('node-uuid')\n  , _        = require('underscore')\n  , oauth1a  = require('../auth/oauth1a')\n  , PubSubConnection  = require('../auth/pubsub')\n  , Message = require('../message')\n\n  , Transform = stream.Transform\n\n  , FB_GRAPH_URL = 'https://graph.facebook.com/v2.2/'\n\n  , FB_DEFAULT_PAGE_SUBSCRIBED_FIELDS = [\n    'feed'\n  ]\n;\n\n\n\n\nfunction Facebook(options){\n\n  options = _.extend({\n    filters: []\n  },options);\n\n  Transform.call(this, {\n    objectMode: true\n  });\n\n  this.appId          = options.appId;\n  this.appSecret      = options.appSecret;\n  this.appAccessToken = this.getApplicationToken();\n  this.subscriptionCallbackURL = options.subscriptionCallbackURL;\n  this.pubsub         = options.pubsub || new PubSubConnection( this.appSecret, this);\n  this.uuid           = uuid.v1();\n\n  this._filters = options.filters || [];\n  this._pages = [];\n};\nutil.inherits(Facebook, Transform);\n\n\nFacebook.prototype.stream = function(request, auth, socializr){\n  if( !this._piped){\n    this._piped = true;\n    this.pubsub\n    .pipe( this)\n    .pipe( socializr);\n    this.on('warning', socializr._onError.bind(socializr));\n    var data, i;\n    this._pages = this._pages.concat( request.pages);\n    for( i=0; i<request.pages.length; i++){\n      data = request.pages[i];\n      debug('Subscribing to [ %s ]',data.name);\n      this.subscribeTo( data.page, data.access_token, function(res){\n        debug('Subscription responded %s',res.error||res.text);\n      });\n    }\n  }\n  return this;\n};\n\nFacebook.prototype.unstream = function(request, auth, socializr){\n\n  return this;\n};\n\nFacebook.prototype.auth = function(auth){\n  auth._provider = this;\n  return auth;\n};\n\n\nFacebook.prototype.getApplicationToken = function(cb){\n  if( cb){\n    this._graphRequest( 'oauth/access_token', 'GET', {\n      client_id:      this.appId,\n      client_secret:  this.appSecret,\n      grant_type:     'client_credentials'\n    }, function(res){\n      cb&&cb(res);\n    });\n  }\n  return [\n    this.appId,\n    this.appSecret\n  ].join('|');\n};\n\n\nFacebook.prototype.getTokenInfo = function(token, cb){\n  this._graphRequest( 'debug_token', 'GET', {\n    input_token:  token,\n    access_token: this.appAccessToken\n  }, function(res){\n    cb&&cb(res);\n  });\n};\n\nFacebook.prototype.exchangeToken = function(token, cb){\n  this._graphRequest( 'oauth/access_token', 'GET', {\n    grant_type:         'fb_exchange_token',\n    client_id:          this.appId,\n    client_secret:      this.appSecret,\n    fb_exchange_token:  token\n  }, function(res){\n    cb&&cb(res);\n  });\n};\n\nFacebook.prototype.subscribeTo = function(id,token,cb){\n  this._graphRequest( id + '/subscribed_apps', 'POST', {\n    access_token: token\n  },function(res){\n    cb&&cb(res);\n  });\n};\n\nFacebook.prototype.unsubscribe = function(id,token,cb){\n  this._graphRequest( id + '/subscribed_apps', 'DELETE', {\n    access_token: token\n  },function(res){\n    cb&&cb(res);\n  });\n};\n\nFacebook.prototype.subscribe = function(type,cb){\n  this.subscribedFields = FB_DEFAULT_PAGE_SUBSCRIBED_FIELDS;\n\n  var verify_token = this.pubsub.verifyToken();\n\n  this._graphRequest( this.appId + '/subscriptions', 'POST', {\n    object:       type || 'page',\n    callback_url: this.subscriptionCallbackURL,\n    fields:       this.subscribedFields.join(','),\n    verify_token: verify_token,\n    access_token: this.appAccessToken\n  },function(res){\n    cb&&cb(res);\n  });\n};\n\nFacebook.prototype.getUserAccounts = function(user, token, cb){\n  this._graphRequest( user + '/accounts', 'GET', {\n    access_token: token\n  }, function(res){\n    cb&&cb(res);\n  });\n};\n\nFacebook.prototype.install = function(pageId, token, cb){\n  this._graphRequest( pageId + '/tabs', 'POST', {\n    app_id:       this.appId,\n    access_token: token\n  }, function(res){\n    cb&&cb(res);\n  });\n};\n\nFacebook.prototype.uninstall = function(pageId, token, cb){\n  var self = this;\n  this._graphRequest( pageId + '/tabs/app_' + this.appId, 'DELETE', {\n    access_token: token\n  }, function(res){\n    cb&&cb(res);\n  });\n};\n\n\nFacebook.prototype._transform = function(chunk, encoding, done){\n  var expected = 0\n    , stream = this\n  ;\n  for( var i in chunk.entry){\n    for( var j in chunk.entry[i].changes){\n      expected++;\n      this._graphRequest( chunk.entry[i].changes[j].value.post_id, 'GET', {}, function(res){\n        expected--;\n\n        if( res.error){\n          debug('Error requesting data. Server responded %s', res.error);\n        }else{\n\n          try {\n            var data = JSON.parse(res.text);\n          }catch(err){\n            debug('Error parsing chunk. Parser threw error %j',err);\n          }\n          if( data && stream.include(data)) {\n            stream.push(\n              new Message( stream, data )\n            );\n          }\n        }\n\n        if( !expected){\n          done();\n        }\n      })\n    }\n  }\n};\n\nFacebook.prototype.include = function(data){\n  if(this._filters){\n    var pass = true;\n    this._filters.forEach( function(cb){\n      if( !cb(data)){\n        pass = false;\n        return false;\n      }\n    });\n    return pass;\n  }\n  return true;\n};\n\n\nFacebook.prototype._graphRequest = function(endpoint, method, data, cb){\n\n  var url = FB_GRAPH_URL + endpoint\n    , req\n  ;\n\n  if( !data.hasOwnProperty('access_token')){\n    data.access_token = this.appAccessToken;\n  }\n\n  switch( method.toUpperCase()){\n\n    case 'GET':\n\n      req = request.get(url)\n              .query(data)\n              .end( function(res){\n                cb&&cb( res);\n              })\n      break;\n\n    case 'POST':\n\n      req = request.post(url)\n              .send(data)\n              .end( function(res){\n                cb&&cb( res);\n              })\n      break;\n\n    case 'DELETE':\n\n      req = request.del(url)\n              .query(data)\n              .send(data)\n              .end( function(res){\n                cb&&cb( res);\n              })\n      break;\n\n  }\n\n\n};\n\n\nmodule.exports = Facebook;\n","/home/travis/build/npmtest/node-npmtest-socializr/node_modules/socializr/lib/providers/instagram.js":"var debug    = require('debug')('socializr:provider:instagram')\n  , stream   = require('stream')\n  , util     = require('util')\n  , request  = require('superagent')\n  , _        = require('underscore')\n  , uuid     = require('node-uuid')\n  , oauth1a  = require('../auth/oauth1a')\n  , PubSubConnection  = require('../auth/pubsub')\n  , Message = require('../message')\n\n  , Transform = stream.Transform\n\n  , IG_API_URL = 'https://api.instagram.com/v1/'\n\n  , IG_OBJECT_USER = 'user'\n\n  , IG_OBJECT_TAG = 'tag'\n\n  , IG_OBJECT_LOCATION = 'location'\n\n  , IG_OBJECT_GEOGRAPHY = 'geography'\n\n  , IG_DEFAULT_SUBSRIPTION_TYPE = IG_OBJECT_USER\n\n;\n\n\nfunction Instagram(options){\n\n  options = _.extend({\n    filters: []\n  },options);\n\n  Transform.call(this, {\n    objectMode: true\n  });\n\n  this.clientId     = options.appId;\n  this.clientSecret = options.appSecret;\n  this.subscriptionCallbackURL = options.subscriptionCallbackURL;\n\n  this.pubsub         = options.pubsub || new PubSubConnection( this.clientSecret, this);\n  this.uuid           = uuid.v1();\n\n  this._filters = options.filters;\n  this._tags = [];\n};\nutil.inherits(Instagram, Transform);\n\n\nInstagram.prototype.stream = function(request, auth, socializr){\n  if( !this._piped){\n    this._piped = true;\n    this.pubsub\n    .pipe( this)\n    .pipe( socializr);\n    this.on('warning', socializr._onError.bind(socializr));\n  }\n  var data, i;\n  this._tags = this._tags.concat( request.tags);\n  for( i in request.tags){\n    data = {\n      type: IG_OBJECT_TAG,\n      tag: request.tags[i].toString().replace('#','')\n    };\n    debug('Subscribing to %s with %s',data.type,data.tag);\n    this.subscribe( data, function(err,res){\n      debug('Subscription responded %j',res?res.body:err);\n    });\n  }\n  return this;\n};\n\nInstagram.prototype.unstream = function(request, auth, socializr){\n\n  var data, i;\n  this._tags = this._tags.concat( request.tags);\n  for( i in request.tags){\n    debug('Unsubscribing data %j',request.tags[i]);\n    this.unsubscribe( request.tags[i].toString().replace('#',''), function(err,res){\n      debug('Unsubscribe responded %j',res.body);\n    });\n  }\n  return this;\n};\n\nInstagram.prototype.auth = function(auth){\n  auth._provider = this;\n  return auth;\n};\n\n\nInstagram.prototype.subscribe = function(sub, cb){\n\n  var verify_token = this.pubsub.verifyToken()\n    , data = {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        object: sub.type || IG_DEFAULT_SUBSRIPTION_TYPE,\n        aspect: 'media',\n        verify_token: verify_token,\n        callback_url: this.subscriptionCallbackURL\n      }\n  ;\n\n  switch( sub.type){\n    case IG_OBJECT_TAG:\n      data = _.extend(data,{\n        object_id: sub.tag\n      });\n      break;\n\n    case IG_OBJECT_LOCATION:\n      data = _.extend(data,{\n        object_id: sub.location\n      });\n      break;\n\n    case IG_OBJECT_GEOGRAPHY:\n      data = _.extend(data,{\n        lat: sub.lat,\n        lng: sub.lng,\n        radius: sub.radius\n      });\n      break;\n  };\n\n  debug('Creating subscription with data %j', data);\n  this._apiRequest( 'subscriptions', 'POST', data, function(err,res){\n    cb&&cb(err,res);\n  });\n};\n\nInstagram.prototype.unsubscribe = function(type){\n\n  switch(type){\n    case 'all':\n    case 'tag':\n    case 'location':\n    case 'user':\n    case 'geography':\n      this._apiRequest( 'subscriptions', 'DELETE', {\n        client_id:     this.clientId,\n        client_secret: this.clientSecret,\n        object: type\n      }, function(){\n        debug('%s subscription removed %s', type);\n      });\n    break;\n    default:\n      if( type&&type.length){\n\n        var self = this;\n        this.subscriptions( function(err,res){\n\n          data = res.body.data;\n          data = data instanceof Array ? data : [data];\n          type = type instanceof Array ? type : [type];\n\n          debug('Unsubscribing data %s',type);\n\n          for(var i in data) {\n            d = data[ i];\n            if( d && type.indexOf(d.object_id) !== -1 ){\n              self._apiRequest( 'subscriptions', 'DELETE', {\n                client_id:     self.clientId,\n                client_secret: self.clientSecret,\n                id: d.id\n              }, function(err,res){\n                // console.log('unsubscribe instagram', err, d.object_id, res.body);\n                debug('Request %s to unsubscribe responded',d.id);\n              });\n            }\n          };\n        });\n      }\n\n    break;\n  }\n\n};\n\nInstagram.prototype.subscriptions = function(cb){\n  this._apiRequest( 'subscriptions', 'GET', {\n    client_id:     this.clientId,\n    client_secret: this.clientSecret\n  }, function(err,data){\n    cb&&cb(err,data);\n  });\n};\n\nInstagram.prototype._transform = function(chunk, encoding, done){\n\n  var expected = 0\n    , stream = this\n    , obj = null\n    , complete = _.after(chunk.length, function(){\n      done();\n    })\n  ;\n  for( var i in chunk){\n\n    obj = chunk[i];\n    switch( obj.object){\n      case IG_OBJECT_TAG:\n        this.getMediaByTag(chunk[i].object_id, function(err,res){\n          var data = res.body.data;\n          for( var j in data){\n            if( stream.include(data[j])){\n              stream.push(\n                new Message(stream,data[j])\n              );\n            }\n          }\n          complete();\n        });\n\n        break;\n      default:\n        complete();\n        break;\n    }\n  }\n\n};\n\n\n\nInstagram.prototype.include = function(data){\n  var pass = true;\n  this._filters.forEach( function(cb){\n    if( !cb(data)){\n      pass = false;\n      return false;\n    }\n  });\n  return pass;\n};\n\n\nInstagram.prototype.getMediaByTag = function(tag, cb){\n  this._apiRequest( 'tags/' + tag + '/media/recent', 'GET', {\n    client_id: this.clientId\n  }, function(err,res){\n    cb&&cb(err, res);\n  });\n};\n\nInstagram.prototype.getFeed = function(token, cb){\n  this._apiRequest( 'users/self/feed', 'GET', {\n    access_token: token\n  }, function(err,res){\n    cb&&cb(err, res);\n  });\n};\n\nInstagram.prototype.findMediaAtLocation = function(id){\n  this._apiRequest( 'locations/' + id + '/media/recent', 'GET', {\n  }, function(err,res){\n    cb&&cb(err, res);\n  });\n};\n\nInstagram.prototype.getLocations = function(lat, lng){\n  this._apiRequest( 'locations/search', 'GET', {\n    lat: '',\n    lng: ''\n  }, function(err,res){\n    cb&&cb(err, res);\n  });\n};\n\nInstagram.prototype.getMediaByLocation = function(id){\n  this._apiRequest( 'locations/' + id + '/media/recent', 'GET', {\n  }, function(err,res){\n    cb&&cb(err, res);\n  });\n};\n\nInstagram.prototype.getMediaByGeo = function(id){\n  this._apiRequest( 'geographies/' + id + '/media/recent', 'GET', {\n    client_id: this.clientId\n  }, function(err,res){\n    cb&&cb(err, res);\n  });\n};\n\n\n\nInstagram.prototype._apiRequest = function(endpoint, method, data, cb){\n  var url = IG_API_URL + endpoint;\n  switch( method.toUpperCase()){\n\n    case 'GET':\n\n      request.get(url)\n        .query(data)\n        .end( function(err,res){\n          cb&&cb(err,res);\n        });\n      break;\n\n    case 'POST':\n\n      request.post(url)\n        .type('form')\n        .send(data)\n        .end( function(err,res){\n          cb&&cb(err,res);\n        });\n\n      break;\n\n    case 'DELETE':\n\n      request.del(url)\n        .query(data)\n        .end( function(err,res){\n          cb&&cb(err,res);\n        });\n      break;\n  }\n\n};\n\n\nmodule.exports = Instagram;\n","/home/travis/build/npmtest/node-npmtest-socializr/node_modules/socializr/lib/providers/gplus.js":"var debug    = require('debug')('socializr:provider:gplus')\n  , stream   = require('stream')\n  , util     = require('util')\n  , zlib     = require('zlib')\n  , https    = require('https')\n  , url      = require('url')\n  , qs       = require('querystring')\n  , events   = require('events')\n  , _        = require('underscore') \n  , Scheduler = require('pragma-scheduler')\n  , uuid     = require('node-uuid')\n  , Message = require('../message')\n  , Transform = stream.Transform\n\n\n\n  /**\n   * Package info\n   */\n  , pkg = require('../../package')\n\n;\n\n\nfunction GooglePlus(options){\n  options = _.extend({\n    filters: []\n  },options);\n\n  Transform.call(this, {\n    objectMode: true\n  });\n  this._apiKey = options.key;\n\n  this._pageLimit = options.pages || 5;\n  this._pageToken = null;\n  this._pageCount = 0;\n  this._refreshRate = options.refresh || 15000;\n  this._filters = options.filters;\n\n  this.uuid = uuid.v1();\n\n  this._timer = new Scheduler(0, this._refreshRate, function(){\n    this._page();\n  }.bind(this));\n  this._timer.start();\n\n};\nutil.inherits(GooglePlus, Transform);\n\n\nGooglePlus.prototype.request = function(endpointUrl, method, data){\n  this._req = https.request(\n    this._createRequestOptions( endpointUrl, method, data),\n    this._connectionResponse.bind(this)\n  );\n  this._req.end();\n};\n\nGooglePlus.prototype._createRequestOptions = function(endpointUrl, endpointMethod, data){\n\n  this._prevRequest = arguments;\n\n  var method = endpointMethod || 'GET'\n    , _uri = url.parse(endpointUrl)\n    , _qs = ''\n  ;\n\n  if( method == 'GET'){\n    _qs = '?' + qs.stringify({\n      key: this._apiKey,\n      orderBy: 'recent',\n      maxResults: 20,\n      pageToken: this._pageToken || '',\n      query: data.tags&&data.tags.join('|')\n    });\n\n    debug('Building request with querystring %s',_qs);\n  }\n\n  return {\n    hostname: _uri.hostname,\n    path:     _uri.pathname + _qs,\n    method:   method,\n    headers: {\n      'User-Agent':       pkg.name + ' v' + pkg.version,\n      'Content-Type':     'application/x-www-form-urlencoded;charset=UTF-8',\n      'Accept-Encoding':  'gzip',\n      'Connection':       'keep-alive'\n    },\n\n    /* Disable agent pooling */\n    agent: false\n  };\n};\n\nGooglePlus.prototype._connectionResponse = function(res){\n  debug('Request responded with status code %s',res.statusCode);\n  switch( res.statusCode){\n\n    case 200:\n      this._connected( res);\n      break;\n\n    default:\n      this._connectionError( res);\n      break;\n  }\n\n};\n\nGooglePlus.prototype._connected = function(res){\n\n  this._res = res;\n  var body = '';\n  switch( res.headers['content-encoding']){\n    case 'gzip':\n      this._gunzip = zlib.createGunzip();\n      \n      this._gunzip.on('data', function(data){\n        body += data.toString();\n      });\n\n      this._gunzip.on('end', function(){\n        this._pipeResponse(body);\n      }.bind(this));\n\n      this._res.pipe(this._gunzip);\n      break;\n\n    default:\n\n      res.on('data', function(chunk) {\n        body += chunk\n      });\n\n      res.on('end', function(){\n        this._pipeResponse(body);\n      }.bind(this));\n\n      break;\n  }\n};\n\nGooglePlus.prototype._page = function(){\n  if (this._prevResponse) {\n    if( this._prevResponse.nextPageToken!=this._pageToken){\n      this._pageToken = this._prevResponse.nextPageToken;\n      this.request.apply(this, this._prevRequest);\n    }else{\n      this._pageToken = null;\n    }\n  }\n};\n\n\nGooglePlus.prototype._pipeResponse = function(data){\n  this._prevResponse = data = JSON.parse(data);\n  if( data && data.items){\n    for (var i = data.items.length - 1; i >= 0; i--) {\n      this.write(JSON.stringify(data.items[i]), 'utf8');\n    };\n  }\n};\n\n\nGooglePlus.prototype._connectionError = function(res){\n  console.log(res.body);\n  this.emit('warning', new Error(res.statusCode));\n};\n\n\nGooglePlus.prototype.auth = function(auth){\n  auth._provider = this;\n  return auth;\n};\n\nGooglePlus.prototype._transform = function(data,encoding,done){\n  try {\n    data = JSON.parse(data);\n    if( this.include(data)){\n      this.push(\n        new Message( this, data )\n      );\n    }\n  }catch(err){\n    debug('Data parse error. Error parsing chunk. Parser trew %j',err);\n    this.emit('warning', new Error(err));\n  }\n  done();\n};\n\n\nGooglePlus.prototype.include = function(data){\n  var pass = true;\n  this._filters.forEach( function(cb){\n    if( !cb(data)){\n      pass = false;\n      return false;\n    }\n  });\n  return pass;\n};\n\n\nGooglePlus.prototype.stream = function(request, auth, socializr){\n  if( !this._piped){\n    this._piped = true;\n    this.pipe( socializr);\n    this.on('warning', socializr._onError.bind(socializr));\n  }\n  this._pageToken = null;\n  this.request('https://www.googleapis.com/plus/v1/activities','GET',request);\n  return this;\n};\n\nGooglePlus.prototype.unstream = function(request, auth, socializr){\n  // this.request('https://www.googleapis.com/plus/v1/activities','GET',request);\n  return this;\n};\n\nmodule.exports = GooglePlus;\n"}